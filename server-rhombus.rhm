#lang rhombus

import:
  rhombus/cmdline open
  rhombus/network

export:
  test

fun make_srv(host::String, port::NonnegInt):
   guard.let udp = network.UDP(~family_host: host)
   | error(0,0, "Fail")
   udp.bind(~host: host, ~port: port)
   when !udp.is_bound()
   | error(0,0, "Error bound srv!")
   println("Make Rhombus UDP server " +& host +& ":" +& port)
   udp


fun srv(s :~ network.UDP):
  let packLen = 4096
  let pack = Bytes.make(packLen)
  recur net_loop(i=1):
    let (pack_len, from, from_port) = s.receive(pack, 0, packLen)
    s.send_to(~host: from, ~port: from_port,
              pack, 0, pack_len)
    print(i,  ".read ",  pack_len, " bytes from ", from, "\r" )
    net_loop(i+1)


fun test():
  let host = "localhost"
  let port = 4555
  Closeable.let s = make_srv(host, port)
  srv(s)


def make_config:
    parser:
      args addr ...


module main:
  let args = make_config.parse()[#'args]
  let mutable addr = "localhost:4555"
  when args.length() > 0
  | addr := args[0]
  let [host, port] = addr.split(":")
  Closeable.let s = make_srv(host, String.maybe_to_int(port))
  srv(s)


// run:
// $ racket server-rhombus.rkt localhost:4577
